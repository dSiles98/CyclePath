// <auto-generated />
using System;
using CyclepathAPI.CyclepathDataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CyclepathAPI.Migrations
{
    [DbContext(typeof(CyclepathDbContext))]
    [Migration("20181125040330_AzureInitial")]
    partial class AzureInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CyclepathAPI.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Birthday")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailVerified");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("ThemeId");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LanguageId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("Disponible");

                    b.Property<string>("Image");

                    b.Property<double>("Price");

                    b.Property<int>("RentPointId");

                    b.HasKey("Id");

                    b.HasIndex("RentPointId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("CyclepathAPI.Models.BlockList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdBlocked");

                    b.Property<int>("IdOwner");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Checkpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Length");

                    b.Property<int>("RouteId");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Enlistment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdAccount");

                    b.Property<int>("IdEvent");

                    b.HasKey("Id");

                    b.ToTable("Enlistments");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventDate");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.Property<int>("RouteId");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CyclepathAPI.Models.FriendList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IdFriend");

                    b.Property<string>("IdOwner");

                    b.HasKey("Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageAccount");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Addressee");

                    b.Property<string>("Content");

                    b.Property<int>("OwnerId");

                    b.Property<DateTime>("SendTime");

                    b.Property<bool>("delivered");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CyclepathAPI.Models.RentPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Direction");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("OwnerId");

                    b.Property<int>("Rating");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("RentPoints");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Category");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Date");

                    b.Property<string>("Owner");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Themes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Theme");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("CyclepathAPI.Models.Account", b =>
                {
                    b.HasOne("CyclepathAPI.Models.Language", "LanguageUserId")
                        .WithMany("Accounts")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("ForeignKey_Language_User_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CyclepathAPI.Models.Themes", "ThemeUserId")
                        .WithMany("Accounts")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("ForeignKey_Theme_User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CyclepathAPI.Models.Bike", b =>
                {
                    b.HasOne("CyclepathAPI.Models.RentPoint", "RentPoint")
                        .WithMany("Bikes")
                        .HasForeignKey("RentPointId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CyclepathAPI.Models.Checkpoint", b =>
                {
                    b.HasOne("CyclepathAPI.Models.Route")
                        .WithMany("Checkpoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CyclepathAPI.Models.RentPoint", b =>
                {
                    b.HasOne("CyclepathAPI.Models.Account", "Owner")
                        .WithMany("RentPoints")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
